A sequence of natural numbers S−>[1,2,3,...,N] is provided. Then an operation is conducted on S, i.e., from the sequence S,X numbers are removed randomly. Find the Kth minimum in the sequence S, after the operation is conducted.

Input:
First line will contain T, number of testcases. Then the testcases follow.
Each test case consists of N,X and K followed by X pace separated integers in the next line, denoting the numbers removed from sequence S.
Output:
For each test case, print Kth smallest number in the sequence S after the operation is conducted. If no such number exists, output −1.

Constraints
1≤T≤10
1≤N≤109
0≤X≤min(N,105)
1≤K≤N
Sample Input:
2
4 1 2
1
5 2 4
1 3
Sample Output:
3
-1
EXPLANATION:
Test case 1: Remaining numbers are [2, 3, 4]. 3 is the 2nd smallest remaining number.
Test case 2: Remaining numbers are [2, 4, 5]. The 4th smallest remaining number doesn't exist.

Unable to View Problem Statement Correctly?
Visit Link for the problem statement: https://www.codechef.com/problems/HB820TQM

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Note: The solution is in Python
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def func(l,low,k):
  high =  len(l) - 1
  while(low <= high):
    mid = (low + high) // 2
    if l[mid] == k:
      return mid
    elif l[mid] < k:
      low = mid + 1
    else:
      high = mid - 1
  return high
 
t=int(input())
for x in range(0,t):
  n,k,p = tuple(map(int,input().split()))
  l = list(map(int,input().split()))
  if ((n-k) >= p):
    i=func(l,0,p)+1;ext=1
    while(ext!=0):
      ext = func(l,i,i+p) - i + 1
      i = i + ext
    i = i + p
    if i <= n:
      print(i)
    else:
      print(-1)
  else:
    print(-1)
